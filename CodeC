#include <stdlib.h>
#include <unistd.h>
#include <sys/stat.h>
#include<unistd.h>
#include<stdio.h>
#include <limits.h>
#include <string.h>
#include<sched.h>
#include<unistd.h>
#define SUITE1 "suitedescommandes"
int arg_index = 0;
int env_index = 0;
int i, n[20];
char s[100];
typedef struct process
{
int DA;
int TE;
int tempsej;
int temfin;
int pol;
int pr;
int reste;

}process;

struct sched_param P;
int main ( int argc, char * argv [ ] , char * envp [ ] )  {
    for(i=1;i<n;i++){
    printf("choisir l'operation : \n");
    printf("--------------------------------------------------------MENU------------------------------------------------------------- \n");
    printf("1: afficher l'emplacement du répertoire (chdir)| 2 : retourner .. | 3 : creer un fichier (mkdir) | 4 : variables d'environement \n");
    printf("5: lecture d'une suite des commandes | 6 : afficher le nom du programme | 7 : Ordonnancement FIFO | 8 : Ordonnancement SJF \n");
    printf("9 : Ordonnancement Round-Robin | 10: commande clear | 11 : commande quitter \n");
    printf("--------------------------------------------------------------------------------------------------------------------------- \n");
    char ch[10];
    scanf("%d",&i);
    switch(i){

case 1:{
   printf("%s\n", getcwd(s, 100));}break;
case 2:{
   chdir("..");
   printf("%s\n", getcwd(s, 100));}break;

case 3:{
   FILE *fp;
   int i;
   char Nom_fichier[30];
   char str[50];
   printf(" donner le nom du fichier \n");
   scanf("%s",Nom_fichier);
   fp  = fopen (Nom_fichier, "w");
   printf(" j'ai cree  un fichier\n ");}break;
case 4:{
  FILE *P_FICHIER;
  char NOM_FICHIER[30], variable[30];
  int  C, NB_ENREG;
  char *var = getenv("PATH");
  char *var1 = getenv("homePATH");

       printf("le nom de fichier  : ");
		 scanf("%s", NOM_FICHIER);
       P_FICHIER = fopen(NOM_FICHIER, "w");
        printf("variable d'envirennement ");
      scanf("%d", &NB_ENREG);
      C = 0;
      while (C<NB_ENREG)
      {
      fprintf(P_FICHIER, "%s\n", var1);
      fprintf(P_FICHIER, "%s\n", var);
      C++;}
      P_FICHIER = fopen(NOM_FICHIER, "r");  /* read */
       C = 0;
       while (!feof(P_FICHIER))
        {fscanf(P_FICHIER, "%s\n", var1);
         fscanf(P_FICHIER, "%s\n", var);
         printf("HOME = %s\n", var1);
         printf("PATH = %s\n", var);
         C++;
        }
  fclose(P_FICHIER);}break;
case 5:{
char ch1[100];
FILE *f_in;
int c;
if ((f_in = fopen("C:\\Users\\hp\\Desktop\\SystExploi\\suitedescommandes.txt","r")) == NULL)
    {
      printf( "Erreur: Impossible de lire le fichier %s\n",SUITE1);
      return(EXIT_FAILURE);
    }
else
{
fgets(ch1,100,f_in);
printf("%s \n",ch1);
char * ch2=strtok (ch1,";");
while (ch2 != NULL)
  {
    printf("%s \n \n",ch2);
    system(ch2);
    printf("\n");
    ch2= strtok (NULL, ";");
  }}}break;
case 6:{
 int counter;
    printf("Program Name Is: %s",argv[0]);
    if(argc==1)
        printf("\nNo Extra Command Line Argument Passed Other Than Program Name");
    if(argc>=2)
    {
        printf("\nNumber Of Arguments Passed: %d",argc);
        printf("\n----Following Are The Command Line Arguments Passed----");
        for(counter=0;counter<argc;counter++)
            printf("\nargv[%d]: %s",counter,argv[counter]);
    }break;
case 7:{
    int i,j,nb,sfin,ss,ssej,q,ttime,c; process* proc;char politique[20];process permut;float temsej;int pid,* pri;
    P.sched_priority=5;

    /*Dnner le nombre de processus*/
    printf ("entrer le nombre de processus\n");
    scanf("%d",&nb);

 /*allouer le tableau de maniÃ&#168;re dynamique*/
proc=( process *)malloc(sizeof( process )*nb);
 /*FIFO*/
 /*attribuer Ã  chaque processus une date d'arrivee et un temps d'execution*/
   for(i=0;i<nb;i++)
   {printf("entrer la date d'arrivee du processu (%d)\n",i+1);
   scanf("%d",&proc[i].DA);
   printf("entrer la duree d'execution du processus (%d)\n",i+1);
   scanf("%d",&proc[i].TE);
   }
/*trier le tableau par ordre croissant de date darrivee pour faciliter le traitement par la suite*/
for(i=0;i<nb+1;i++)
for(j=i+1;j<nb;j++)
{
if (proc[i].DA>proc[j].DA)

{
permut=proc[i];
proc[i]=proc[j];
proc[j]=permut;
}

}
printf("\n");
printf("Processus\t DA\t TE\n");
for (i=0;i<nb;i++)
{
printf("p(%d)\t\t %dms \t %dms\n",i+1,proc[i].DA,proc[i].TE);
}
printf("\n");
/*afficher lA DATE DE FIN D'EXECUTION DE CHAQUE  processuss*/
printf("****date de fin d'execution des %d processus****\n",nb);
for(i=0;i<nb;i++)
{printf("p(%d)\t",i+1);
}
printf("\n");
/*Calcul*/
sfin=0;
ssej=0;
for(i=0;i<nb;i++)
{
 sfin=sfin+proc[i].TE;
 proc[i].temfin=sfin;
 ssej=sfin-proc[i].DA;
 proc[i].tempsej=ssej;
printf("%dms\t",proc[i].temfin);

}
printf("\n");
/*afficher le temps de sejour de chaque processuss*/

printf("*******TEMPS DE SEJOUR*******\n");
for(i=0;i<nb;i++)
{printf("p(%d)\t",i+1);
}
printf("\n");
ss=0;
for(i=0;i<nb;i++)
{ss=ss+proc[i].tempsej;
 printf("%dms\t",proc[i].tempsej);
}
printf("\n");
/*afficher le temps moyen de sejour */
printf("*******TEMPS MOYEN DE SEJOUR*******");
printf("\n");
temsej=(float)ss/nb;
printf("le temps moyen de sejour est (temps moyen sÃ©jour= %fms\n",temsej);
printf("\n\n");
	printf("**Diagramme de Gantt** \n\n");
    printf(" ");
    for(i=0; i<nb; i++) {
        for(j=0; j<proc[i].TE; j++) printf("--");
        printf(" ");
    }
    printf("\n|");

    for(i=0; i<nb; i++) {
        for(j=0; j<proc[i].TE  -1 ; j++);
        for(j=0; j<proc[i].TE -1 ; j++);

    }
    printf("|");
    printf("p(2) | p(1)");
    printf("\n ");
    for(i=0; i<nb; i++) {
        for(j=0; j<proc[i].TE; j++) printf("--");
        printf(" ");
    }
    printf("\n%d",proc[0].DA);
    for(i=0; i<nb; i++) {
        for(j=0; j<proc[i].TE; j++) printf("  ");
        if(proc[i].temfin > 9) printf("\b"); // backspace : remove 1 space
        printf("%d", proc[i].temfin);
    }
printf("\n\n");
    }break;
    case 8:{
        int bt[20],p[20],wt[20],tat[20],i,j,n,total=0,pos,temp;
    float avg_wt,avg_tat;
    printf("Enter number of process:");
    scanf("%d",&n);

    printf("\nEnter Burst Time:\n");
    for(i=0;i<n;i++)
    {
        printf("p%d:",i+1);
        scanf("%d",&bt[i]);
        p[i]=i+1;           //contains process number
    }

    //sorting burst time in ascending order using selection sort
    for(i=0;i<n;i++)
    {
        pos=i;
        for(j=i+1;j<n;j++)
        {
            if(bt[j]<bt[pos])
                pos=j;
        }

        temp=bt[i];
        bt[i]=bt[pos];
        bt[pos]=temp;

        temp=p[i];
        p[i]=p[pos];
        p[pos]=temp;
    }

    wt[0]=0;            //waiting time for first process will be zero

    //calculate waiting time
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
            wt[i]+=bt[j];

        total+=wt[i];
    }

    avg_wt=(float)total/n;      //average waiting time
    total=0;

    printf("\nProcess\t    Burst Time    \tWaiting Time\tTurnaround Time");
    for(i=0;i<n;i++)
    {
        tat[i]=bt[i]+wt[i];     //calculate turnaround time
        total+=tat[i];
        printf("\np%d\t\t  %d\t\t    %d\t\t\t%d",p[i],bt[i],wt[i],tat[i]);
    }

    avg_tat=(float)total/n;     //average turnaround time
    printf("\n\nAverage Waiting Time=%f",avg_wt);
    printf("\nAverage Turnaround Time=%f\n",avg_tat);
    }break;
    case 9:{

  int count,j,n,time,remain,flag=0,time_quantum;
  int wait_time=0,turnaround_time=0,at[10],bt[10],rt[10];
  printf("Enter Total Process:\t ");
  scanf("%d",&n);
  remain=n;
  for(count=0;count<n;count++)
  {
    printf("Enter Arrival Time and Burst Time for Process Process Number %d :",count+1);
    scanf("%d",&at[count]);
    scanf("%d",&bt[count]);
    rt[count]=bt[count];
  }
  printf("Enter Time Quantum:\t");
  scanf("%d",&time_quantum);
  printf("\n\nProcess\t|Turnaround Time|Waiting Time\n\n");
  for(time=0,count=0;remain!=0;)
  {
    if(rt[count]<=time_quantum && rt[count]>0)
    {
      time+=rt[count];
      rt[count]=0;
      flag=1;
    }
    else if(rt[count]>0)
    {
      rt[count]-=time_quantum;
      time+=time_quantum;
    }
    if(rt[count]==0 && flag==1)
    {
      remain--;
      printf("P[%d]\t|\t%d\t|\t%d\n",count+1,time-at[count],time-at[count]-bt[count]);
      wait_time+=time-at[count]-bt[count];
      turnaround_time+=time-at[count];
      flag=0;
    }
    if(count==n-1)
      count=0;
    else if(at[count+1]<=time)
      count++;
    else
      count=0;
  }
  printf("\nAverage Waiting Time= %f\n",wait_time*1.0/n);
  printf("Avg Turnaround Time = %f",turnaround_time*1.0/n);
    }break;

case 10:{
printf("Before cleaning\n");
 system("cls");
 printf("After cleaning\n");
}break;
case 11:{
char    buffer[50];
printf("\nInterpreteur de commande\nTaper \"exit\" pour quitter\n");
    while(1)
    {   printf("Prompt : ");
        scanf("%s",buffer);
        if (strcmp("exit",buffer)==0)
        {exit(0); }
        else
        {printf("Commande inconnue ...\n");}
    }
}
}
default:break;
    }
    }
}
